/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

/******************************************************
                    Defaults   
******************************************************/

/*
Default settings including:
    font-family
    color
    (each of these are inherited from the html element)
    font-size
    (used for REM values and also inherited from the html)
*/

html{
    font-family: 'Open Sans', sans-serif;
    font-size: 14px;
    color:black;
}

/*
Default styling for repeated elements, such as links, headers, etc.
*/

a{
    text-decoration:none;
}

h1{
    font-size:3rem;
    font-weight:700;
    line-height:1.6;
    margin-bottom:1rem;
}

h2{
    font-size:2rem;
    font-weight:700;
    margin:2.5rem 0 1rem;
}

h3{
    font-size:1.4rem;
    font-weight:700;
    margin:1.5rem 0 1rem;
}

p{
    line-height:1.4;
}

button{
    cursor:pointer;
}

.calltoaction{
    background-color:#222;
    color:white;
    padding:1.5rem;
    display:inline-block;
    margin-top:10px;    
}

.calltoaction i.icon{
    padding-left:10px;
}

/*
this sets up the 100% width banner/background for any element with the class fullbreak
*/
.fullbreak{    
    position:absolute;
    top:0;
    left:0;
    z-index:-1;
    height:100%;
    width:100%;
    background-position:center center;
    background-size:cover;
}


/******************************************************
                    Nav   
******************************************************/

/*
The nav is set to position relative so it will hold the position absolute full-width background inside it
*/
nav{
    padding: 10px;
    position:relative;
}

.navback{
    background-color:#222;
}

.logo{
    background-color:#c78c06;
}

nav ul a{
    display:block;
    padding:1rem;
    color:#c78c06;
    text-align:center; 
}

nav a.current, nav a:active{
    background-color:#c78c06;
    color:#222;
}

/*
 Display flex is great for making things sit beside each other, like the search bar and search button
*/
nav form{
    display:flex;
}

nav form input{
    flex-grow:1;
    padding:4px 2px;
}

nav form button{
    border:1px solid #c78c06;
    color:#c78c06;
    background-color:#222;
}


/******************************************************
                    Header   
******************************************************/

header{
    position:relative;
    padding:3rem 0;
    color:white;
}

.headerback{
    background-image:url("../images/main-banner.jpg");
}

.headercontent{
    background-color:rgba(0,0,0,0.6);
    padding:2rem 10px 10px;
}

header a.calltoaction{
    color:#222;
    background-color:#c78c06;
}

/******************************************************
                Main - About  
******************************************************/

#about{
    padding:10px;
    position:relative;
}

#about h2{
    margin-top:1.5rem;
}

.aboutback{
    background-color:#ffe6ac;
}

#about img{
    width:100%;
}

#about p{
    margin-bottom:1em;
}

/******************************************************
                Main - Services  
******************************************************/

#services{
    padding:0 10px;
}

#services section{
    margin-bottom:10px;
    background-color:#ffe6ac;
}

#services section img{
    width:100%;
}

#services section div{
    padding:0 10px 10px;
}

/******************************************************
                Main - Vision  
******************************************************/
.vision{
    position:relative;
    padding:10px;
    color:white;
}

.visionback{
    background-image:url("../images/vision.jpg");
}

.vision h3{
    color:white;
}

.vision .calltoaction{
    border:1px solid #c78c06;
}

/******************************************************
                Main - Team  
******************************************************/
#team{
    padding:0 10px;
}

#team section{
    background-color:#ffe6ac;
    margin-bottom:10px;
}

#team img{
    width:100%;
}

#team section div{
    padding:10px;
}

#team h3{
    margin:10px 0 5px;
}

#team h4{
    font-weight:700;
    border-bottom:2px solid #c78c06;
    line-height:1.4;
}

#team p{
    margin:10px 0;
}


/******************************************************
                Main - Contact  
******************************************************/
#contact{
    padding:10px;
}

#contact label{
    display:block;
    line-height:1.4;
    margin-top:10px;
}

/*
Box-sizing:border-box is used here as form fields have default padding and borders
setting a form field to 100% means its with is 100% + the padding + the border
but using border-box means the padding and border are included within the 100% width
*/
#contact input, #contact textarea{
    box-sizing:border-box;
    display:block;
    width:100%;
}

/*
The height of the textarea is set using em, meaning relative to the textarea's font size
The margin is set using rem, meaning relative to the root font size (the HTML element)
If the font size of the textarea changes, its height will respond, but the margin will not change
*/
#contact textarea{
    height:8em;
    margin-bottom:1rem;
}

#contact button{
    font-size:1rem;
    background-color:#222;
    color:#c78c06;
    border:none;
    padding:5px;
}

table{
    width:100%;
    box-sizing:border-box;
}

th, td{
    border:1px solid black;
    padding:1rem;
}

th{
    background-color:#ffe6ac;
}

th:first-child{
    width:60%;
}

#contact iframe{
    width:100%;
    height:400px;
}


/******************************************************
                    Footer  
******************************************************/

footer{
    font-size:0.8rem;
    position:relative;
    padding:10px;
}

.footerback{
    background-color:#222;
}

footer p{
    margin-top:10px;
    color:#c78c06;
}

footer a{
    text-decoration:underline;
    color:#c78c06;
}

/******************************************************
                    Media Queries   
******************************************************/

@media screen and (min-width:760px){
    /* ~~~~~~~~~~~~~~~~ Defaults ~~~~~~~~~~~~~~~~*/
    body{
        font-size:16px;
    }
    
    /*
    A maximum width is used in combination with the 85% width, so that at sizes smaller than 1200px,
    the site will still appear to have bleeding backgrounds (full-width banners)
    Margin:0 auto; centres the site in the browser window after it reaches its maximum width
    */
    .container{
        width:85%;
        margin:0 auto;
        max-width:1200px;
    }

    /*
    The larger version of the full width banners requires some extra code to make sure they stay
    centred in the browser window along with the site.

    Now, here's the funny thing: 100vw does not take account the width of a vertical scrollbar.
    Meaning that with this solution, the site will have about 10px of horizontal wiggle room.
    Most people won't notice this, but it does mean that this isn't a perfect solution to
    the full-width banner problem.

    It is possible to shut scroll bars off, using overflow-x:hidden; on the body, but that means
    if the user zooms in they won't be able to scroll horizontally, which isn't a solution at all.

    It is also possible to use a javascript and/or SASS solution which would take into account
    the width of the scrollbar and set the width of these banners accordingly, though even these
    solutions aren't always perfect. 
    */
    .fullbreak{
        width:100vw;
        left: 50%;
        right: 50%;
        margin-left: -50vw;
        margin-right: -50vw;
    }


    /* ~~~~~~~~~~~~~~~~ Nav ~~~~~~~~~~~~~~~~*/
    /*
    Flexbox can be used inside another flexbox - in this case, the whole nav is set to flex, making
    the logo, navigation menu, and search sit next to each other.
    Then the ul is set to flex, making each of the navigation items sit next to each other.
    (The search bar/button are also still set to flex from the mobile styles.)
    */
    nav{
        display:flex;
        align-items:center;
        justify-content:space-between;
    }

    nav ul{
        flex-grow:1;
        max-width:600px;
        display:flex;
        flex-wrap:nowrap;
        justify-content:space-around;
    }

    nav input{
        width:130px;
    }

    nav a:hover{
        background-color:#c78c06;
        color:#222;
    }


    /* ~~~~~~~~~~~~~~~~ Header ~~~~~~~~~~~~~~~~*/
    /* minor changes to the font sizes */
    h1{ font-size:4rem; }
    h2{ font-size:2.5rem; }
    h3{ font-size:1.7rem; }

    /* ~~~~~~~~~~~~~~~~ About ~~~~~~~~~~~~~~~~*/
    /*
    Putting two objects next to each other (the image and the content) can be accomplished using float,
    flex, or grid. In this case, as they are two evenly spaced areas, grid seemed the best solution
    */
    #about{
        display:grid;
        grid-template-columns:1fr 1fr;
    }

    #about h2{
        margin-top:0.5rem;
    }

    #about div:last-of-type{
        padding-left:10px;
    }

    /* ~~~~~~~~~~~~~~~~ Services ~~~~~~~~~~~~~~~~*/
    /*
    Creating this grid setup - two objects followed by three objects - can be done a number of ways,
    including using column start/end values, grid-area, or a grid map (as I've used below).
    A six-column grid is best, since both 2 and 3 divide into 6.
    */
    #services{
        display:grid;
        grid-template-columns:repeat(6, 1fr);
        grid-template-areas:
            "H H H H H H"
            "D D D M M M"
            "V V W W P P";
        column-gap:10px;
        margin-bottom:1rem;
    }

    /* mapping each of the areas in the service section to the grid map above */
    #services h2{ grid-area: H; }
    .digital{ grid-area: D; }
    .marketing{ grid-area: M; }
    .videop{ grid-area: V; }
    .webp{ grid-area: W; }
    .printp{ grid-area: P; }


    /* ~~~~~~~~~~~~~~~~ Team ~~~~~~~~~~~~~~~~*/
    #team section{
        display:flex;
    }

    /*
    The margin on the below section overrides the margin set from the mobile sizes (so the two sections
    in the Team article will be touching each other).
    */
    #team section:first-of-type{
        margin-bottom:0;
    }

    /*
    Display:flex was used here to reverse the order of the second row - using row-reverse
    */
    #team section:last-of-type{
        flex-direction:row-reverse;
    }

    #team img{
        width:50%;
    }


    /* ~~~~~~~~~~~~~~~~ Contact ~~~~~~~~~~~~~~~~*/
    /*
    In this case, the grid map seemed the quickest way to change the order of the elements in the contact
    section (the form, map, and table).
    However, the same could be accomplished without the map using column start/end properties and
    the order property.
    */
    #contact{
        display:grid;
        grid-template-columns:repeat(6, 1fr);
        grid-template-areas:
            "H H H H H H"
            "F F F M M M"
            "O O O O O O";
        column-gap:10px;
        margin-bottom:1rem;
    }

    #contact h2{ grid-area: H; }
    .contactus{ grid-area: F; }
    .location{ grid-area: M; }
    .hours{ grid-area: O; }
}